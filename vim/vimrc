"Gvim Options
if has('win32')
  set nocompatible
  set shell=C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe
  set guioptions-=m "menu bar
  set guioptions-=T "Tool bar
  set guioptions-=r "scroll bar
  set guifont=Fixedsys:h7
  set vb t_vb=

  let $VIM_CONFIG = $HOME."\\.config\\vim\\vimrc"
  let $PLUG = $VIM."\\plugged"
else
  if has('unix')
    " XDG support

    if empty($VIM_CONFIG) | let $VIM_CONFIG = expand('<sfile>:p') | endif

    if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
    if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
    if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
    if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

    set runtimepath^=$XDG_CONFIG_HOME/vim
    set runtimepath+=$XDG_DATA_HOME/vim
    set runtimepath+=$XDG_CONFIG_HOME/vim/after

    set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
    set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

    let g:netrw_home = $XDG_DATA_HOME."/vim"
    call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)

    set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
    set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
    set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
    set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)

    if !has('nvim') " Neovim has its own special location
      set viminfofile=$XDG_STATE_HOME/vim/viminfo
    endif
    "Vim-Plug
    let data_dir = has('nvim') ? stdpath('data') . '/state' : $XDG_DATA_HOME.'/vim/'
    if empty(glob(data_dir . '/autoload/plug.vim'))
      silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    endif
    autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)')) | PlugInstall --sync | source $VIM_CONFIG | endif
  endif
endif

" Plugins
filetype plugin on
if ! empty(globpath(&rtp, 'autoload/plug.vim'))
 call plug#begin($XDG_DATA_HOME.'/vim')
  " Plug 'vimwiki/vimwiki'
  " Plug 'junegunn/goyo.vim' "Goyo seems like a buggy mess ngl
  "Plug 'junegunn/limelight.vim'
  Plug 'tpope/vim-surround'
  "Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-vinegar'
  Plug 'preservim/vim-markdown'
  "Plug 'vim-latex/vim-latex'
  "Plug 'junegunn/fzf'
  "Plug 'junegunn/fzf.vim'
  "Plug 'michal-h21/vim-zettel'
  Plug 'tyrannicaltoucan/vim-quantum'
  "Plug '4513ECHO/vim-colors-hatsunemiku'
  " Plug 'vim-scripts/zoom.vim'
  Plug 'tpope/vim-repeat'
  Plug 'svermeulen/vim-subversive'
  Plug 'tpope/vim-abolish'
  " Plug 'jiangmiao/auto-pairs'
  Plug 'kurkale6ka/vim-pairs'
  Plug 'chrisbra/csv.vim'
  Plug 'tpope/vim-fugitive'
  " Plug 'ziglang/zig.vim'
  Plug 'yegappan/lsp'
  call plug#end()
else
  echo "vim-plug not installed"
endif


"Visual options
syntax on
set nu ruler
set mouse=a
set termguicolors
colorscheme quantum
set scrolloff=5
set colorcolumn=80

"Folding options
set foldenable foldmethod=indent foldignore=

"Searching
set ignorecase smartcase

"Tabs
set autoindent smartindent smarttab expandtab
set shiftwidth=2 tabstop=2 softtabstop=2

"Swap files and Backups
set noswapfile
set nobackup nowritebackup
set undodir=~/.vim/undodir undofile

"Basic mappings
nmap Y y$

""Subversive mappings
nmap s <plug>(SubversiveSubstitute)
nmap ss <plug>(SubversiveSubstituteLine)
nmap S <plug>(SubversiveSubstituteToEndOfLine)

"Leader mappings
let mapleader=" "
nmap <silent> <leader>r :source $VIM_CONFIG<cr>:echo 'Reloaded'<cr>
nmap <silent> <leader>R :tab drop $VIM_CONFIG<cr>:w<cr>:source $VIM_CONFIG<cr>:echo 'Reloaded'<cr>
nmap <silent> <leader>cf :tab drop $VIM_CONFIG<cr>
nmap <silent> <leader>pl :Git pl<cr>
nmap <silent> <leader>gs :Git st %<cr>
nmap <silent> <leader>ga :Git a %<cr>
nmap <silent> <leader>pt :Git pt %<cr>
nmap <silent> <leader>cm :Git cm<cr>
nmap <silent> <leader>ps :Git ps<cr>
nmap <leader>b <c-^>
nmap <silent> <leader>ssh :tab ter++close ssh MCO<cr>
nmap <silent> <leader>t :ter<cr>
nmap <silent> <leader>T :tab ter<cr>
"Windows and Tabs
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l
nmap H :lefta vsplit<cr>
nmap J :below split<cr>
nnoremap ZJ J
nmap K :above split<cr>
nnoremap L :rightb vsplit<cr>
nnoremap gl L
nnoremap gh H
nnoremap gs gh
nnoremap gS gH
nnoremap g<c-s> g<c-h>
nmap <c-s-h> <c-w>H
nmap <c-s-j> <c-w>J
nmap <c-s-k> <c-w>K
nmap <c-s-l> <c-w>L
nmap <c-t> :tabe<cr>
nmap <c-s-t> :tabe #<cr>
tmap <c-t> <c-w>:tabe<cr>
tmap <c-s-t> <c-w>:tabe #<cr>
nmap <c-q> :q<cr>
nmap <c-s-q> :q!<cr>
nnoremap <c-.> gt
nnoremap <c-,> gT
tnoremap <c-.> <c-w>gt
tnoremap <c-,> <c-w>gT

"Ex-mode and command-line
nmap Q <nop>
nnoremap g: q:
nnoremap g/ q/
nnoremap <c-s-;> Q

"File Specific
""Markdown
function! MarkdownLevel()
  let h = matchstr(getline(v:lnum), '^#\+')
  if empty(h)
    return "="
  else
    return ">" . len(h)
  endif
endfunction

autocmd BufEnter * if &filetype == "" | setlocal ft=markdown | endif
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
set conceallevel=2
let g:netrw_browsex_viewer= "start"
au BufEnter *.md setlocal foldexpr=MarkdownLevel()
au BufEnter *.md setlocal foldmethod=expr
au BufEnter *.md setlocal foldlevel=2

if expand('%:~') =~# '^\~\/writing'
  au VimEnter,BufEnter *.md setlocal path+=~/writing,~/writing/daily,~/writing/people
  au VimEnter,BufEnter *.md setlocal suffixesadd=.md
endif
if expand('%:~') =~# '^\~\/fiction'
  let start_hour = strftime("%H")
  let start_min = strftime("%M")
  let start_wc = wordcount().words
  let current_word_target = 2000
  set laststatus=2
  set statusline=%{wordcount().words}\ \/\ %{current_word_target}\ words\ (%{wordcount().words-start_wc}\ new\ words\ in\ %{strftime('%H')*60+strftime('%M')-start_hour*60-start_min}\ mins)
endif
function! NeatFoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()

"""LSP and Languages
let lspOpts = #{autoHighlightDiags: v:true}
autocmd User LspSetup call LspOptionsSet(lspOpts)
""Python
autocmd Filetype python nnoremap <buffer> <leader>gc :w<cr>:ter++close py %<cr>
autocmd Filetype python nnoremap <buffer> <leader>go :w<cr>:ter py %<cr>
autocmd Filetype python nnoremap <buffer> <leader>gt :w<cr>:tab ter py %<cr>
autocmd FileType python set shiftwidth=2 tabstop=2 softtabstop=2
	" \    path: '/c/Users/mason.owen/AppData/Local/Programs/Python/Python311/Scripts/pylsp',
let lspPythonServer = [#{
	\    name: 'pylsp',
	\    filetype: 'python',
	\    path: '/usr/local/bin/pylsp',
  \    args: [],
	\    syncInit: v:true
	\  }]
autocmd User LspSetup call LspAddServer(lspPythonServer)
""Go
autocmd Filetype go nnoremap <buffer> <leader>gc :w<cr>:ter++close go run %<cr>
autocmd Filetype go nnoremap <buffer> <leader>go :w<cr>:ter go run %<cr>
autocmd Filetype go nnoremap <buffer> <leader>gt :w<cr>:tab ter go run %<cr>
autocmd FileType go set shiftwidth=2 tabstop=2 softtabstop=2
let lspGoServer = [#{
  \    name: 'gopls',
  \    filetype: ['go', 'gomod'],
  \    path: '/usr/local/bin/gopls',
  \    args: ['serve'],
  \    syncInit: v:true
  \  }]
autocmd User LspSetup call LspAddServer(lspGoServer)

"Zig
 autocmd Filetype zig autocmd! vim-zig BufWrite
 autocmd Filetype zig nnoremap <buffer> <leader>g :w<cr>:ter++close
       \ C:\\Users\\mason.owen\\.local\\bin\\zig-windows-x86_64-0.13.0\\zig.exe build run<cr>
 autocmd Filetype zig nnoremap <buffer> <leader>go :w<cr>:ter
       \ C:\\Users\\mason.owen\\.local\\bin\\zig-windows-x86_64-0.13.0\\zig.exe build run<cr>
 autocmd Filetype zig nnoremap <buffer> <leader>f :w<cr>:ter
       \ C:\\Users\\mason.owen\\.local\\bin\\zig-windows-x86_64-0.13.0\\zig.exe
